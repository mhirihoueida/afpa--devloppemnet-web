*Exercice 11.1
Écrivez une fonction qui renvoie la somme de cinq nombres fournis en argument.

Fonction Sum(a, b, c, d, e) en Numérique
  Renvoyer a + b + c + d + e
FinFonction

*Exercice 11.2
Écrivez une fonction qui renvoie le nombre de voyelles contenues dans une chaîne de caractères passée en argument. Au passage, 
notez qu'une fonction a tout à fait le droit d'appeler une autre fonction.

Fonction NbVoyelles(Mot en Caractère) en Numérique
Variables i, nb en Numérique
nb ← 0
Pour i ← 1 à Len(Mot)
  Si Trouve("aeiouy", Mid(Mot, i, 1)) <> 0 Alors
    nb ← nb + 1
  FinSi
i suivant
Renvoyer nb
FinFonction


*Exercice 11.3

Réécrivez la fonction Trouve, vue précédemment, à l’aide des fonctions Mid et Len 

Fonction Trouve(a en Caractère, b en Caractère) en Numérique
Variable i en Numérique
Début
i ← 1
TantQue i < Len(a) - Len(b) et b <> Mid(a, i, Len(b))
  i ← i + 1
FinTantQue
Si b <> Mid(a, i, Len(b)) Alors
  Renvoyer 0
Sinon
 
FinSi
Renvoyer i
FinFonction


*Exercice 11.4
Ecrivez une fonction qui purge une chaîne d'un caractère, la chaîne comme le caractère étant passés en argument. Si le caractère 
spécifié ne fait pas partie de la chaîne, celle-ci devra être retournée intacte. Par exemple :
Purge("Bonjour","o") renverra "Bnjur"
Purge("J'ai horreur des espaces"," ") renverra "J'aihorreurdesespaces"
Purge("Moi, je m'en fous", "y") renverra "Moi, je m'en fous"


Fonction PurgeSimple(a en Caractère, b en Caractère) en Caractère
Variable Sortie en Caractère
Variable i en Numérique
Début
Sortie ← ''
Pour i ← 1 à Len(a)
   Si Mid(a, i, 1) <> b Alors
      Sortie ← Sortie & Mid(a, i, 1)
   FinSi
i suivant
Renvoyer Sortie
FinFonction


*Exercice 11.6
Ecrire un traitement qui effectue le tri d'un tableau envoyé en argument (on considère que le code appelant devra également fournir 
le nombre d'éléments du tableau).

Procédure TriTableau(T[] en Numérique par Référence, n en Numérique par Valeur)
Variables i, posmini, temp en Numérique
Début
Pour i ← 0 à n-2
   posmini ← i
   Pour j ← i + 1 à n-1
      Si T[j] < T[posmini] Alors
         posmini ← j
      Finsi
   j suivant
   temp ← T[posmini]
   T[posmini] ← T[i]
   T[i] ← temp
i suivant
FinProcédure

*Exercice 11.9
reprendre l'exercice 11.6, mais cette fois la procédure comprendra un troisième paramètre, de type booléen. VRAI, celui-ci indiquera 
que le tri devra être effectué dans l'ordre croissant, FAUX dans l'ordre décroissant.

Procédure TriTableau(T[] en Numérique par Référence, n en Numérique par Valeur, Croissant en Booléen par Valeur)
Variables i, pos, temp en Numérique
Début
Pour i ← 0 à n-2
   pos ← i
   Pour j ← i + 1 à n-1
      Si Croissant Alors
         Si T[j] < T[pos] Alors
            pos ← j
         Finsi
      Sinon
         Si T[j] > T[pos] Alors
            pos ← j
         Finsi
      Finsi
   j suivant
   temp ← T[pos]
   T[pos] ← T[i]
   T[i] ← temp
i suivant
FinProcédure