*Exercice 7.1
Ecrivez un algorithme qui permette de saisir un nombre quelconque de valeurs, 
et qui les range au fur et à mesure dans un tableau. 
Le programme, une fois la saisie terminée, doit dire si les éléments du tableau sont tous consécutifs ou non.


Variables Nb, i en Entier
Variable Flag en Booleen
Tableau T[] en Entier
Debut
Ecrire "Entrez le nombre de valeurs :"
Lire Nb
Redim T[Nb-1]
Pour i ← 0 à Nb - 1
  Ecrire "Entrez le nombre n° ", i + 1
  Lire T[i]
i Suivant
Flag ← Vrai
Pour i ← 1 à Nb - 1
  Si T[i] <> T[i – 1] + 1 Alors
    Flag ← Faux
  FinSi
i Suivant
Si Flag= vrai  Alors
  Ecrire "Les nombres sont consécutifs"
Sinon
  Ecrire "Les nombres ne sont pas consécutifs"
FinSi
Fin

mais quand il s'agit d'un grand tableau , c'est trop long de faire tous de chemin de tableau . 
du coup il existe la solution suivante , qui s'explique par: 
à partir ou on a deux cases consécutifs qui sont pas succesives , la boucle s'arrete .
i ← 1
TantQue T[i] = T[i – 1] + 1 et i < Nb - 1
  i ← i + 1
FinTantQue
Si T[i] = T[i – 1] + 1 Alors
  Ecrire "Les nombres sont consécutifs"
Sinon
  Ecrire "Les nombres ne sont pas consécutifs"
FinSi




* exercice 7.2

Ecrivez un algorithme qui trie un tableau dans l’ordre décroissant.
Vous écrirez bien entendu deux versions de cet algorithme, l'une employant le tri par sélection, l'autre le tri à bulles.

--retenu de cours (la formule magique : tri de tableau + flag = tri à bulles.
L’idée de départ du tri à bulles consiste à se dire qu’un tableau trié en ordre croissant,
 c’est un tableau dans lequel tout élément est plus petit que celui qui le suit.(le flag, est un petit drapeau, qui va rester baissé aussi longtemps que l’événement attendu ne se produit pas. Et, aussitôt que cet événement a lieu, le petit drapeau se lève (la variable booléenne change de valeur). Ainsi, 
 la valeur finale de la variable booléenne permet au programmeur de savoir si l’événement a eu lieu ou non.))

 Yapermut ← Vrai
TantQue Yapermut
  Yapermut ← Faux
  Pour i ← 0 à N - 2
    Si t[i] < t[i + 1] Alors
      temp ← t[i]
      t[i] ← t[i + 1]
      t[i + 1] ← temp
      Yapermut ← Vrai
    Finsi
  i suivant
FinTantQue
Fin

*exercice 7.3

Exercice 7.3
Ecrivez un algorithme qui inverse l’ordre des éléments d’un tableau dont 
on suppose qu'il a été préalablement saisi (« les premiers seront les derniers… »)

Pour i ← 0 à (N-1)/2
  Temp ← T[i]
  T[i] ← T[N-1-i]
  T[N-1-i] ← Temp
i suivant
Fin

*Exercice 7.4
Ecrivez un algorithme qui permette à l’utilisateur de supprimer une valeur d’un tableau préalablement saisi. L’utilisateur donnera l’indice de la valeur qu’il souhaite supprimer.
Attention, il ne s’agit pas de remettre une valeur à zéro, mais bel et bien de la supprimer du tableau lui-même.

…
Ecrire "Rang de la valeur à supprimer ?"
Lire S
Pour i ← S à N-2
  T[i] ← T[i+1]
i suivant
Redim T[N–1]
Fin

*exercice 7.5 



Variables Sup, Inf, Comp en Entier
Variables Fini en Booléen
Début
Ecrire "Entrez le mot à vérifier"
Lire Mot
Sup ← N - 1
Inf ← 0
Fini ← Faux
TantQue Non Fini
Comp ← [Sup + Inf]/2    --(Comp désigne l'indice de l'élément à comparer)
Si Mot < Dico[Comp] Alors   --(Si le mot se situe avant le point de comparaison, alors la borne supérieure change, la borne inférieure ne bouge pas)
    Sup ← Comp - 1
Sinon
    Inf ← Comp + 1
  FinSi
  Fini ← Mot = Dico[Comp] ou Sup < Inf
FinTantQue
Si Mot = Dico[Comp] Alors
  Ecrire "le mot existe"
Sinon
  Ecrire "Il n'existe pas"
Finsi
Fin    


*Exercice 7.6
Écrivez un algorithme qui fusionne deux tableaux (déjà existants) dans un troisième, qui devra être trié.

retenu (les deux tableaux de départ, A[m] et B[n], sont déjà triés : pas question donc de les empiler simplement pour se relancer dans un (long) tri
    Le truc est qu'on ne sait pas par avance où on va en être à un moment donné dans un tableau et dans l'autre : il nous faut donc deux compteurs différents pour noter notre position dans chacun des deux tableaux. On appelle C le tableau de destination, 
    et ic la variable qui indique où on en est dans celui-ci.)

Début
(...)
Afini ← faux
Bfini ← faux
ia ← 0
ib ← 0
ic ← -1
TantQue Non Afini ou Non Bfini
   ic ← ic + 1
   Redim C[ic]
   Si Afini ou A[ia]>B[ib] Alors
      C[ic] ← B[ib]
      ib ← ib + 1
      Bfini ← ib > n
   Sinon
      C[ic] ← A[ia]
      ia ← ia + 1
      Afini ← ia > m
   FinSi
FinTantQue
Fin
